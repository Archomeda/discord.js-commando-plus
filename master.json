{"meta":{"generator":"0.7.4","format":19,"date":1510588201073},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Commando-Plus\n[![Dependency status](https://david-dm.org/Archomeda/discord.js-commando-plus.svg)](https://david-dm.org/Archomeda/discord.js-commando-plus)\n[![Build status](https://travis-ci.org/Archomeda/discord.js-commando-plus.svg)](https://travis-ci.org/Archomeda/discord.js-commando-plus)\n\n## About\nCommando-Plus extends on [Commando](https://github.com/Gawdl3y/discord.js-commando). Info snippet from Commando:\n> It is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\nIf you are looking for better support, and do not plan to use any of the features of Commando-Plus, please use Commando instead.\nThis repository is mostly here to support my own Discord bots in order to share common used code between them without having to manually duplicate them in every repository.\n\n## Features on top of Commando\n- Todo\n\n## Installation\n**Node 8.0.0 or newer is required.**  \n`npm install archomeda/discord.js-commando-plus --save`\n","path":"docs/general/welcome.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\nThe first thing you need to do to use Commando-Plus is ensure you're creating a [CommandoClient](https://archomeda.github.io/discord.js-commando-plus/#/docs/commando-plus/master/class/CommandoClient)\nrather than the regular discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client).\nA CommandoClient is just an extension of the base Client, so all options, properties, methods, and events on Client are also on CommandoClient.\n\nYou should provide the `owner` option to the constructor, which is an option specific to CommandoClient, and should be set to the ID of your Discord user.\nThis will give you full access to control everything about the bot, in any guild.\n\n```javascript\nconst Commando = require('discord.js-commando-plus');\n\nconst client = new Commando.Client({\n\towner: '1234567890'\n});\n```\n\nThen, to make use of the command framework (what else would you be doing with Commando-Plus?), you need to register your command groups, commands, and argument types,\nin addition to any of the built-in stuff that you want make use of. This will look something like this:\n\n```javascript\nconst path = require('path');\n\nclient.registry\n\t// Registers your custom command groups\n\t.registerGroups([\n\t\t['fun', 'Fun commands'],\n\t\t['some', 'Some group'],\n\t\t['other', 'Some other group']\n\t])\n\n\t// Registers all built-in groups, commands, and argument types\n\t.registerDefaults()\n\n\t// Registers all of your commands in the ./commands/ directory\n\t.registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nCommando-Plus has built-in command prefix configuration per-guild, as well as enabling and disabling commands per-guild.\nIn order for this to persist across restarts, you should use a [SettingsProvider](https://archomeda.github.io/discord.js-commando-plus/#/docs/commando-plus/master/class/SettingsProvider).\nThere is a built-in SQLiteProvider that comes with Commando-Plus, which stores all settings in an SQLite3 database.\nTo use it, install the `sqlite` module with NPM (`npm install --save sqlite`). Then, set the provider on the client:\n\n```javascript\nconst sqlite = require('sqlite');\n\nclient.setSettingsProvider(\n\tsqlite.open(path.join(__dirname, 'settings.sqlite3')).then(db => new Commando.SQLiteProvider(db))\n).catch(console.error);\n```\n\nFinally, you must log in, just as if you were using a regular Client.\n\n```javascript\nclient.login('token goes here');\n```\n\nThere is an extremely simple example bot used to test Commando-Plus, of which you can view the source [here](https://github.com/Archomeda/discord.js-commando-plus/tree/master/test).\n","path":"docs/general/first-steps.md"}}},"commands":{"name":"Commands","files":{"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\nCommando-Plus has built-in commands that should be useful for just about any bot.\n\n## Utility (util)\n### help (util:help)\nIf no arguments are specified, the command displays a list of all commands available in the current context.\nIn order for a command to be displayed, it must be enabled in the guild (or global), and the user must have permission to use it.\nPassing the `all` argument will list all commands, regardless of context.\nPassing anything else will search for any commands that match, and display detailed information if only one is found.\n\n### ping (util:ping)\nThe ping command will send a message, then edit it to contain the amount of time it took.\nIt also displays the client's heartbeat ping.\n\n### prefix (util:prefix)\nThis command, if not provided with any arguments, will display the current command prefix, and how to use commands.\nIf the command is used in a guild channel and an argument is specified, it will set the command prefix for the guild if the user is a guild admin, or the bot owner,\nIf the command is used in a DM and an argument is specified, it will set the global default command prefix if the user is the bot owner.\n\n### eval (util:eval)\nThe eval command will allow the bot owner to evaluate any JavaScript code, and display its result.\nIt will automatically hide the bot's token/email/password in the output.\nCaution should still be taken, however, as you could potentially break your running bot with it.\n\nIn the script, `this` will refer to the Command instance.\nThere are several shortcut variables and helpers that are also available:\n\n| Name             | Type     | Description                                                                        |\n|------------------|----------|------------------------------------------------------------------------------------|\n| `message`, `msg` | Variable | The message that triggered the command                                             |\n| `client`         | Variable | Shortcut to `this.client`                                                          |\n| `objects`        | Variable | Shortcut to `this.client.registry.evalObjects`                                     |\n| `lastResult`     | Variable | Shortcut to `this.lastResult` (the previous `eval` result value)                   |\n| `doReply(val)`   | Function | Sends another detailed message with any value to display. Useful for callbacks.    |\n\n## Command state (commands)\n### enable (commands:enable)\nEnables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, enables the command/group globally by default if the user is the bot owner.\n\n### disable (commands:disable)\nDisables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, disables the command/group globally by default if the user is the bot owner.\n\n### reload (commands:reload)\nReloads a command, or all commands in a group, if the user is the bot owner.\n\n### load (commands:load)\nLoads a command if the user is the bot owner. The command must be specified as the full name (`group:memberName`).\nBuilt-in commands cannot be loaded.\n\n### unload (commands:unload)\nUnloads a command if the user is the bot owner.\nBuilt-in commands cannot be unloaded.\n\n### groups (commands:groups)\nLists all command groups if the user is an admin of the current guild, or the bot owner.\n","path":"docs/commands/builtins.md"}}}},"classes":[{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":["Client"],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry.","type":[[["CommandRegistry"]]],"meta":{"line":62,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher.","type":[[["CommandDispatcher"]]],"meta":{"line":68,"file":"client.js","path":"src"}},{"name":"cacheProvider","description":"The client's cache provider.","nullable":true,"type":[[["CacheProvider"]]],"meta":{"line":74,"file":"client.js","path":"src"}},{"name":"settingsProvider","description":"The client's settings provider.","nullable":true,"type":[[["SettingsProvider"]]],"meta":{"line":80,"file":"client.js","path":"src"}},{"name":"storageProvider","description":"The client's storage provider.","nullable":true,"type":[[["StorageProvider"]]],"meta":{"line":86,"file":"client.js","path":"src"}},{"name":"settings","description":"Shortcut to use setting provider methods for the global settings.","type":[[["GuildSettingsHelper"]]],"meta":{"line":92,"file":"client.js","path":"src"}},{"name":"_commandPrefix","description":"Internal global command prefix, controlled by the {@link CommandoClient#commandPrefix} getter/setter.","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":99,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"Global command prefix. An empty string indicates that there is no default prefix, and only mentions will be used.\nSetting to `null` means that the default prefix from {@link CommandoClient#options} will be used instead.","type":[[["string"]]],"meta":{"line":138,"file":"client.js","path":"src"}},{"name":"owners","description":"Owners of the bot, set by the {@link CommandoClientOptions#owner} option\n<info>If you simply need to check if a user is an owner of the bot, please instead use\n{@link CommandoClient#isOwner}.</info>","readonly":true,"nullable":true,"type":[[["Array","<"],["User",">"]]],"meta":{"line":157,"file":"client.js","path":"src"}}],"methods":[{"name":"isOwner","description":"Checks whether a user is an owner of the bot (in {@link CommandoClientOptions#owner}).","params":[{"name":"user","description":"User to check for ownership","type":[[["UserResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if the user is an owner; false otherwise."},"meta":{"line":176,"file":"client.js","path":"src"}},{"name":"setCacheProvider","description":"Sets the cache provider to use, and initializes it once the client is ready.","params":[{"name":"provider","description":"The cache provider to use","type":[[["CacheProvider"]],[["Promise","<"],["CacheProvider",">"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":201,"file":"client.js","path":"src"}},{"name":"setSettingsProvider","description":"Sets the settings provider to use, and initializes it once the client is ready.","params":[{"name":"provider","description":"The settings provider to use","type":[[["SettingsProvider"]],[["Promise","<"],["SettingsProvider",">"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":212,"file":"client.js","path":"src"}},{"name":"setStorageProvider","description":"Sets the storage provider to use, and initializes it once the client is ready.","params":[{"name":"provider","description":"The storage provider to use","type":[[["StorageProvider"]],[["Promise","<"],["StorageProvider",">"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":223,"file":"client.js","path":"src"}},{"name":"initProvider","description":"Initializes a provider.","access":"private","params":[{"name":"provider","description":"The provider to initialize","type":[[["CacheProvider"]],[["SettingsProvider"]],[["StorageProvider"]]]},{"name":"logName","description":"The name to log when initializing","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":236,"file":"client.js","path":"src"}}],"events":[{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandMessage"]]]}],"meta":{"line":131,"file":"dispatcher.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":87,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["Command"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":145,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":207,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":324,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":341,"file":"registry.js","path":"src"}},{"name":"commandBlocked","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `permission`, and `throttling`)","type":[[["string"]]]}],"meta":{"line":131,"file":"message.js","path":"src/commands"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":203,"file":"message.js","path":"src/commands"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":223,"file":"message.js","path":"src/commands"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":26,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":70,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":113,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":21,"file":"client.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":11,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandRegistry"]]],"meta":{"line":23,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set","<"],["function","()>"]]],"meta":{"line":29,"file":"dispatcher.js","path":"src"}},{"name":"_commandPatterns","description":"Map object of {@link RegExp}s that match command messages, mapped by string prefix","access":"private","type":[[["Object"]]],"meta":{"line":36,"file":"dispatcher.js","path":"src"}},{"name":"_results","description":"Old command message results, mapped by original message ID","access":"private","type":[[["Map","<"],["string",", "],["CommandMessage",">"]]],"meta":{"line":43,"file":"dispatcher.js","path":"src"}},{"name":"_awaiting","description":"Tuples in string form of user ID and channel ID that are currently awaiting messages from a user in a channel","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":50,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return ['cool', msg.reply('You\\'re not cool enough!')];\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":75,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":87,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":100,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":167,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandMessage"]]]}],"returns":{"types":[[["Array"]]],"description":"[reason, ?response]","nullable":true},"meta":{"line":191,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"meta":{"line":210,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":229,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":255,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"prefix","description":"Prefix to build the pattern for","nullable":true,"type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":270,"file":"dispatcher.js","path":"src"}}],"meta":{"line":5,"file":"dispatcher.js","path":"src"}},{"name":"CommandRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":24,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"types","description":"Registered argument types","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"evalObjects","description":"Registered objects for the eval command","type":[[["Object"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor,\nan array of [ID, Name], or the group ID","type":[[["CommandGroup"]],[["function"]],[["Array","<"],["string",">"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":59,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","params":[{"name":"groups","description":"An array of CommandGroup instances, constructors,\nor arrays of [ID, Name]","type":[[["Array","<"],["CommandGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":70,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["function"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":106,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["Command",">"]],[["Array","<"],["function","()>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":115,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":163,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link CommandRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":182,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":191,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":225,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands","returns":[[["CommandRegistry"]]],"meta":{"line":236,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups","returns":[[["CommandRegistry"]]],"meta":{"line":247,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"options","description":"Object specifying what commands to register","optional":true,"type":[[["Object"]]]},{"name":"options.help","description":"Whether or not to register the built-in help command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.prefix","description":"Whether or not to register the built-in prefix command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.eval_","description":"Whether or not to register the built-in eval command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.ping","description":"Whether or not to register the built-in ping command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.commandState","description":"Whether or not to register the built-in command state commands\n(enable, disable, reload, list groups)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":265,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry. These are:\n- string\n- integer\n- float\n- boolean\n- user\n- member\n- role\n- channel\n- message","returns":[[["CommandRegistry"]]],"meta":{"line":296,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":316,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":338,"file":"registry.js","path":"src"}},{"name":"registerEvalObject","description":"Registers a single object to be usable by the eval command","see":["{@link CommandRegistry#registerEvalObjects}"],"params":[{"name":"key","description":"The key for the object","type":[[["string"]]]},{"name":"obj","description":"The object","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":357,"file":"registry.js","path":"src"}},{"name":"registerEvalObjects","description":"Registers multiple objects to be usable by the eval command","params":[{"name":"obj","description":"An object of keys: values","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":368,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":379,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":408,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array","<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":424,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":457,"file":"registry.js","path":"src"}},{"name":"resolveCommandPath","description":"Resolves a command file path from a command's group ID and memberName","params":[{"name":"group","description":"ID of the command's group","type":[[["string"]]]},{"name":"memberName","description":"Member name of the command","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":473,"file":"registry.js","path":"src"}}],"meta":{"line":9,"file":"registry.js","path":"src"}},{"name":"Argument","description":"A fancy argument","construct":{"name":"Argument","params":[{"name":"client","description":"Client the argument is for","type":[[["CommandoClient"]]]},{"name":"info","description":"Information for the command argument","type":[[["ArgumentInfo"]]]}]},"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":35,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":41,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":47,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":53,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":60,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":67,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[["*"]],"meta":{"line":73,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":79,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","see":["{@link ArgumentType#validate}"],"nullable":true,"type":[[["function"]]],"meta":{"line":86,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","see":["{@link ArgumentType#parse}"],"nullable":true,"type":[[["function"]]],"meta":{"line":93,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":99,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]},{"name":"value","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":121,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]},{"name":"values","description":"Pre-provided values for the argument","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":206,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"value","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"meta":{"line":318,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"value","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]}],"returns":[["*"],[["Promise","<"],["*",">"]]],"meta":{"line":329,"file":"argument.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["ArgumentInfo"]]]}],"meta":{"line":340,"file":"argument.js","path":"src/commands"}}],"meta":{"line":5,"file":"argument.js","path":"src/commands"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":55,"file":"base.js","path":"src/commands"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":67,"file":"base.js","path":"src/commands"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array","<"],["string",">"]]],"meta":{"line":73,"file":"base.js","path":"src/commands"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":85,"file":"base.js","path":"src/commands"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":91,"file":"base.js","path":"src/commands"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":97,"file":"base.js","path":"src/commands"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":103,"file":"base.js","path":"src/commands"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":109,"file":"base.js","path":"src/commands"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":115,"file":"base.js","path":"src/commands"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":121,"file":"base.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":127,"file":"base.js","path":"src/commands"}},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":133,"file":"base.js","path":"src/commands"}},{"name":"userPermissions","description":"Permissions required by the user to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":139,"file":"base.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":145,"file":"base.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":151,"file":"base.js","path":"src/commands"}},{"name":"argsCollector","description":"The argument collector for the command","nullable":true,"type":[[["ArgumentCollector"]]],"meta":{"line":157,"file":"base.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":170,"file":"base.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":176,"file":"base.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":182,"file":"base.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array","<"],["RegExp",">"]]],"meta":{"line":188,"file":"base.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":194,"file":"base.js","path":"src/commands"}},{"name":"_globalEnabled","description":"Whether the command is enabled globally","access":"private","type":[[["boolean"]]],"meta":{"line":201,"file":"base.js","path":"src/commands"}},{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","type":[[["Map","<"],["string",", "],["Object",">"]]],"meta":{"line":208,"file":"base.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks a user's permission in a guild","params":[{"name":"message","description":"The triggering command message","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":216,"file":"base.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message the command is being run for","type":[[["CommandMessage"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":246,"file":"base.js","path":"src/commands"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary (owners are excluded)","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":256,"file":"base.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":279,"file":"base.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":297,"file":"base.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":309,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":324,"file":"base.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":331,"file":"base.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":361,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":375,"file":"base.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":398,"file":"base.js","path":"src/commands"}}],"meta":{"line":7,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollector","description":"Obtains, validates, and prompts for argument values","construct":{"name":"ArgumentCollector","params":[{"name":"client","description":"Client the collector will use","type":[[["CommandoClient"]]]},{"name":"args","description":"Arguments for the collector","type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"Infinity","type":[[["number"]]]}]},"props":[{"name":"client","description":"Client this collector is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"collector.js","path":"src/commands"}},{"name":"args","description":"Arguments the collector handles","type":[[["Array","<"],["Argument",">"]]],"meta":{"line":27,"file":"collector.js","path":"src/commands"}},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":46,"file":"collector.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Obtains values for the arguments, prompting if necessary.","params":[{"name":"msg","description":"Message that the collector is being triggered by","type":[[["CommandMessage"]]]},{"name":"provided","description":"Values that are already available","optional":true,"default":"[]","type":[[["Array","<"],["*",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"this.promptLimit","type":[[["number"]]]}],"returns":[[["Promise","<"],["ArgumentCollectorResult",">"]]],"meta":{"line":68,"file":"collector.js","path":"src/commands"}}],"meta":{"line":4,"file":"collector.js","path":"src/commands"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commands","description":"The commands that the group contains","optional":true,"default":null,"type":[[["Array","<"],["Command",">"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":18,"file":"group.js","path":"src/commands"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":30,"file":"group.js","path":"src/commands"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":36,"file":"group.js","path":"src/commands"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":42,"file":"group.js","path":"src/commands"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":51,"file":"group.js","path":"src/commands"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":61,"file":"group.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":79,"file":"group.js","path":"src/commands"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":89,"file":"group.js","path":"src/commands"}}],"meta":{"line":4,"file":"group.js","path":"src/commands"}},{"name":"CommandMessage","description":"A container for a message that triggers a command, that command, and methods to respond","construct":{"name":"CommandMessage","params":[{"name":"message","description":"Message that triggers the command","type":[[["Message"]]]},{"name":"command","description":"Command the message triggers","optional":true,"default":null,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"default":null,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"default":null,"nullable":true,"type":[[["Array","<"],["string",">"]]]}]},"props":[{"name":"client","description":"Client that the message was sent from","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":17,"file":"message.js","path":"src/commands"}},{"name":"message","description":"Message that triggers the command","type":[[["Message"]]],"meta":{"line":29,"file":"message.js","path":"src/commands"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":35,"file":"message.js","path":"src/commands"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"message.js","path":"src/commands"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":47,"file":"message.js","path":"src/commands"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":53,"file":"message.js","path":"src/commands"}},{"name":"responsePositions","description":"The index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":59,"file":"message.js","path":"src/commands"}},{"name":"id","description":"Shortcut to `this.message.id`","see":["{@link Message#id}"],"readonly":true,"type":[[["string"]]],"meta":{"line":520,"file":"message.js","path":"src/commands"}},{"name":"content","description":"Shortcut to `this.message.content`","see":["{@link Message#content}"],"readonly":true,"type":[[["string"]]],"meta":{"line":530,"file":"message.js","path":"src/commands"}},{"name":"author","description":"Shortcut to `this.message.author`","see":["{@link Message#author}"],"readonly":true,"type":[[["User"]]],"meta":{"line":540,"file":"message.js","path":"src/commands"}},{"name":"channel","description":"Shortcut to `this.message.channel`","see":["{@link Message#channel}"],"readonly":true,"type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]],"meta":{"line":550,"file":"message.js","path":"src/commands"}},{"name":"guild","description":"Shortcut to `this.message.guild`","see":["{@link Message#guild}"],"readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":560,"file":"message.js","path":"src/commands"}},{"name":"member","description":"Shortcut to `this.message.member`","see":["{@link Message#member}"],"readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":570,"file":"message.js","path":"src/commands"}},{"name":"pinned","description":"Shortcut to `this.message.pinned`","see":["{@link Message#pinned}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":580,"file":"message.js","path":"src/commands"}},{"name":"tts","description":"Shortcut to `this.message.tts`","see":["{@link Message#tts}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":590,"file":"message.js","path":"src/commands"}},{"name":"nonce","description":"Shortcut to `this.message.nonce`","see":["{@link Message#nonce}"],"readonly":true,"type":[[["string"]]],"meta":{"line":600,"file":"message.js","path":"src/commands"}},{"name":"system","description":"Shortcut to `this.message.system`","see":["{@link Message#system}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":610,"file":"message.js","path":"src/commands"}},{"name":"embeds","description":"Shortcut to `this.message.embeds`","see":["{@link Message#embeds}"],"readonly":true,"type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":620,"file":"message.js","path":"src/commands"}},{"name":"attachments","description":"Shortcut to `this.message.attachments`","see":["{@link Message#attachments}"],"readonly":true,"type":[[["Collection","<"],["string",", "],["MessageAttachment",">"]]],"meta":{"line":630,"file":"message.js","path":"src/commands"}},{"name":"reactions","description":"Shortcut to `this.message.reactions`","see":["{@link Message#reactions}"],"readonly":true,"type":[[["Collection","<"],["string",", "],["MessageReaction",">"]]],"meta":{"line":640,"file":"message.js","path":"src/commands"}},{"name":"createdTimestamp","description":"Shortcut to `this.message.createdTimestamp`","see":["{@link Message#createdTimestamp}"],"readonly":true,"type":[[["number"]]],"meta":{"line":650,"file":"message.js","path":"src/commands"}},{"name":"createdAt","description":"Shortcut to `this.message.createdAt`","see":["{@link Message#createdAt}"],"readonly":true,"type":[[["Date"]]],"meta":{"line":660,"file":"message.js","path":"src/commands"}},{"name":"editedTimestamp","description":"Shortcut to `this.message.editedTimestamp`","see":["{@link Message#editedTimestamp}"],"readonly":true,"type":[[["number"]]],"meta":{"line":670,"file":"message.js","path":"src/commands"}},{"name":"editedAt","description":"Shortcut to `this.message.editedAt`","see":["{@link Message#editedAt}"],"readonly":true,"type":[[["Date"]]],"meta":{"line":680,"file":"message.js","path":"src/commands"}},{"name":"mentions","description":"Shortcut to `this.message.mentions`","see":["{@link Message#mentions}"],"readonly":true,"type":[[["Object"]]],"meta":{"line":690,"file":"message.js","path":"src/commands"}},{"name":"webhookID","description":"Shortcut to `this.message.webhookID`","see":["{@link Message#webhookID}"],"readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":700,"file":"message.js","path":"src/commands"}},{"name":"cleanContent","description":"Shortcut to `this.message.cleanContent`","see":["{@link Message#cleanContent}"],"readonly":true,"type":[[["string"]]],"meta":{"line":710,"file":"message.js","path":"src/commands"}},{"name":"edits","description":"Shortcut to `this.message.edits`","see":["{@link Message#edits}"],"readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":720,"file":"message.js","path":"src/commands"}},{"name":"editable","description":"Shortcut to `this.message.editable`","see":["{@link Message#editable}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":730,"file":"message.js","path":"src/commands"}},{"name":"deletable","description":"Shortcut to `this.message.deletable`","see":["{@link Message#deletable}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":740,"file":"message.js","path":"src/commands"}},{"name":"pinnable","description":"Shortcut to `this.message.pinnable`","see":["{@link Message#pinnable}"],"readonly":true,"type":[[["boolean"]]],"meta":{"line":750,"file":"message.js","path":"src/commands"}}],"methods":[{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":70,"file":"message.js","path":"src/commands"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":89,"file":"message.js","path":"src/commands"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":105,"file":"message.js","path":"src/commands"}},{"name":"run","description":"Runs the command","returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":122,"file":"message.js","path":"src/commands"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Message"]],[["Array","<"],["Message",">"]]],"meta":{"line":259,"file":"message.js","path":"src/commands"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array","<"],["Message",">"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":305,"file":"message.js","path":"src/commands"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":346,"file":"message.js","path":"src/commands"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":359,"file":"message.js","path":"src/commands"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":373,"file":"message.js","path":"src/commands"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":387,"file":"message.js","path":"src/commands"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":402,"file":"message.js","path":"src/commands"}},{"name":"embed","description":"Responds with an embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":419,"file":"message.js","path":"src/commands"}},{"name":"replyEmbed","description":"Responds with a mention + embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":432,"file":"message.js","path":"src/commands"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array","<("],["Message","|"],["Array","<"],["Message",">)>"]]]}],"meta":{"line":443,"file":"message.js","path":"src/commands"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":469,"file":"message.js","path":"src/commands"}},{"name":"isMentioned","description":"Shortcut to `this.message.isMentioned(data)`","see":["{@link Message#isMentioned}"],"params":[{"name":"data","description":"A guild channel, user, or a role, or the ID of any of these","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":761,"file":"message.js","path":"src/commands"}},{"name":"isMemberMentioned","description":"Shortcut to `this.message.isMemberMentioned(data)`","see":["{@link Message#isMemberMentioned}"],"params":[{"name":"member","description":"Member/user to check for a mention of","type":[[["GuildMember"]],[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":772,"file":"message.js","path":"src/commands"}},{"name":"edit","description":"Shortcut to `this.message.edit(content)`","see":["{@link Message#edit}"],"params":[{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageEditOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":784,"file":"message.js","path":"src/commands"}},{"name":"editCode","description":"Shortcut to `this.message.editCode(content)`","see":["{@link Message#editCode}"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":796,"file":"message.js","path":"src/commands"}},{"name":"react","description":"Shortcut to `this.message.react()`","see":["{@link Message#react}"],"params":[{"name":"emoji","description":"Emoji to react with","type":[[["string"]],[["Emoji"]],[["ReactionEmoji"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":807,"file":"message.js","path":"src/commands"}},{"name":"clearReactions","description":"Shortcut to `this.message.clearReactions()`","see":["{@link Message#clearReactions}"],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":817,"file":"message.js","path":"src/commands"}},{"name":"pin","description":"Shortcut to `this.message.pin()`","see":["{@link Message#pin}"],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":827,"file":"message.js","path":"src/commands"}},{"name":"unpin","description":"Shortcut to `this.message.unpin()`","see":["{@link Message#unpin}"],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":837,"file":"message.js","path":"src/commands"}},{"name":"delete","description":"Shortcut to `this.message.delete()`","see":["{@link Message#delete}"],"params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":848,"file":"message.js","path":"src/commands"}},{"name":"fetchWebhook","description":"Shortcut to `this.message.fetchWebhook()`","see":["{@link Message#fetchWebhook}"],"returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":858,"file":"message.js","path":"src/commands"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":491,"file":"message.js","path":"src/commands"}}],"meta":{"line":9,"file":"message.js","path":"src/commands"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":["FriendlyError"],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandMessage"]]]}]},"meta":{"line":7,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":["Error"],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":5,"file":"friendly.js","path":"src/errors"}},{"name":"GuildExtension","description":"Contains additional methods and properties that are added to the discord.js Guild class","props":[{"name":"commandPrefix","description":"Command prefix in the guild. An empty string indicates that there is no prefix, and only mentions will be used.\nSetting to `null` means that the prefix from {@link CommandoClient#commandPrefix} will be used instead.","type":[[["string"]]],"meta":{"line":12,"file":"guild.js","path":"src/extensions"}},{"name":"_commandPrefix","description":"Internal command prefix for the guild, controlled by the {@link GuildExtension#commandPrefix} getter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":18,"file":"guild.js","path":"src/extensions"}},{"name":"settings","description":"Shortcut to use setting provider methods for this guild","readonly":true,"type":[[["GuildSettingsHelper"]]],"meta":{"line":40,"file":"guild.js","path":"src/extensions"}},{"name":"_settings","description":"Internal settings helper that is created upon accessing the {@link GuildExtension#settings} getter","access":"private","type":[[["GuildSettingsHelper"]]],"meta":{"line":41,"file":"guild.js","path":"src/extensions"}},{"name":"_commandsEnabled","description":"Map object of internal command statuses, mapped by command name","access":"private","type":[[["Object"]]],"meta":{"line":67,"file":"guild.js","path":"src/extensions"}},{"name":"_groupsEnabled","description":"Internal map object of group statuses, mapped by group ID","access":"private","type":[[["Object"]]],"meta":{"line":110,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":56,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":85,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Command to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":99,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":128,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":141,"file":"guild.js","path":"src/extensions"}},{"name":"applyToClass","description":"Applies the interface to a class prototype","scope":"static","access":"private","params":[{"name":"target","description":"The constructor function to apply to the prototype of","type":[[["function"]]]}],"meta":{"line":150,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":5,"file":"guild.js","path":"src/extensions"}},{"name":"CacheProvider","description":"Handles caching.","abstract":true,"props":[{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setCacheProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"base.js","path":"src/providers/cache"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to the cache backend.\n{@link CommandoClient#setCacheProvider} will automatically call this once the client is ready.","params":[{"name":"client","description":"The client","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":31,"file":"base.js","path":"src/providers/cache"}},{"name":"destroy","description":"Destroys the provider.","abstract":true,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":40,"file":"base.js","path":"src/providers/cache"}},{"name":"has","description":"Determines whether an item exists in the cache.","params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if the key exists; false otherwise."},"meta":{"line":50,"file":"base.js","path":"src/providers/cache"}},{"name":"get","description":"Gets an item from the cache.","abstract":true,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The cached item; or undefined if nothing has been cached."},"meta":{"line":61,"file":"base.js","path":"src/providers/cache"}},{"name":"set","description":"Sets an item in the cache.","abstract":true,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]},{"name":"ttl","description":"The time-to-live in seconds; or undefined if no ttl","type":[[["number"]],[["undefined"]]]},{"name":"value","description":"The value","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if successful; false otherwise."},"meta":{"line":74,"file":"base.js","path":"src/providers/cache"}},{"name":"remove","description":"Removes an item from the cache, if it exists.","abstract":true,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if it has been successfully removed or if the item didn't exist; false otherwise."},"meta":{"line":85,"file":"base.js","path":"src/providers/cache"}},{"name":"cache","description":"Gets a cached item if it exists, otherwise renews it by calling renewer.","params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]},{"name":"ttl","description":"The time-to-live in seconds","type":[[["number"]]]},{"name":"renewer","description":"The renewer function that gets called when the cache has expired.","type":[[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The item."},"meta":{"line":97,"file":"base.js","path":"src/providers/cache"}}],"meta":{"line":9,"file":"base.js","path":"src/providers/cache"}},{"name":"MemoryCacheProvider","description":"Handles caching in-memory. Handled by node-cache.","extends":["CacheProvider"],"construct":{"name":"MemoryCacheProvider","params":[{"name":"nodeCache","description":"The NodeCache instance","type":[[["NodeCache"]]]}]},"props":[{"name":"cache","description":"The NodeCache instance that is used for caching.","readonly":true,"type":[[["NodeCache"]]],"meta":{"line":32,"file":"memory.js","path":"src/providers/cache"}},{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setCacheProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"base.js","path":"src/providers/cache"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to the cache backend.\n{@link CommandoClient#setCacheProvider} will automatically call this once the client is ready.","inherits":"CacheProvider#init","inherited":true,"params":[{"name":"client","description":"The client","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":31,"file":"base.js","path":"src/providers/cache"}},{"name":"destroy","description":"Destroys the provider.","inherits":"CacheProvider#destroy","inherited":true,"abstract":false,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":40,"file":"base.js","path":"src/providers/cache"}},{"name":"has","description":"Determines whether an item exists in the cache.","inherits":"CacheProvider#has","inherited":true,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if the key exists; false otherwise."},"meta":{"line":50,"file":"base.js","path":"src/providers/cache"}},{"name":"get","description":"Gets an item from the cache.","inherits":"CacheProvider#get","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The cached item; or undefined if nothing has been cached."},"meta":{"line":61,"file":"base.js","path":"src/providers/cache"}},{"name":"set","description":"Sets an item in the cache.","inherits":"CacheProvider#set","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]},{"name":"ttl","description":"The time-to-live in seconds; or undefined if no ttl","type":[[["number"]],[["undefined"]]]},{"name":"value","description":"The value","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if successful; false otherwise."},"meta":{"line":74,"file":"base.js","path":"src/providers/cache"}},{"name":"remove","description":"Removes an item from the cache, if it exists.","inherits":"CacheProvider#remove","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if it has been successfully removed or if the item didn't exist; false otherwise."},"meta":{"line":85,"file":"base.js","path":"src/providers/cache"}}],"meta":{"line":12,"file":"memory.js","path":"src/providers/cache"}},{"name":"RedisCacheProvider","description":"Handles caching via Redis.","extends":["CacheProvider"],"construct":{"name":"RedisCacheProvider","params":[{"name":"redis","description":"The Redis instance","type":[[["Redis"]]]}]},"props":[{"name":"cache","description":"The Redis instance that is used for caching.","readonly":true,"type":[[["Redis"]]],"meta":{"line":33,"file":"redis.js","path":"src/providers/cache"}},{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setCacheProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"base.js","path":"src/providers/cache"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to the cache backend.\n{@link CommandoClient#setCacheProvider} will automatically call this once the client is ready.","inherits":"CacheProvider#init","inherited":true,"params":[{"name":"client","description":"The client","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":31,"file":"base.js","path":"src/providers/cache"}},{"name":"destroy","description":"Destroys the provider.","inherits":"CacheProvider#destroy","inherited":true,"abstract":false,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":40,"file":"base.js","path":"src/providers/cache"}},{"name":"has","description":"Determines whether an item exists in the cache.","inherits":"CacheProvider#has","inherited":true,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if the key exists; false otherwise."},"meta":{"line":50,"file":"base.js","path":"src/providers/cache"}},{"name":"get","description":"Gets an item from the cache.","inherits":"CacheProvider#get","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The cached item; or undefined if nothing has been cached."},"meta":{"line":61,"file":"base.js","path":"src/providers/cache"}},{"name":"set","description":"Sets an item in the cache.","inherits":"CacheProvider#set","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]},{"name":"ttl","description":"The time-to-live in seconds; or undefined if no ttl","type":[[["number"]],[["undefined"]]]},{"name":"value","description":"The value","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if successful; false otherwise."},"meta":{"line":74,"file":"base.js","path":"src/providers/cache"}},{"name":"remove","description":"Removes an item from the cache, if it exists.","inherits":"CacheProvider#remove","inherited":true,"abstract":false,"params":[{"name":"table","description":"The table","type":[[["string"]]]},{"name":"key","description":"The item key","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"True if it has been successfully removed or if the item didn't exist; false otherwise."},"meta":{"line":85,"file":"base.js","path":"src/providers/cache"}}],"meta":{"line":12,"file":"redis.js","path":"src/providers/cache"}},{"name":"SettingsProvider","description":"Loads and stores settings associated with guilds.","abstract":true,"props":[{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setSettingsProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":21,"file":"base.js","path":"src/providers/settings"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global').","access":"private","type":[[["Map"]]],"meta":{"line":35,"file":"base.js","path":"src/providers/settings"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name.","access":"private","type":[[["Map"]]],"meta":{"line":42,"file":"base.js","path":"src/providers/settings"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setSettingsProvider} will automatically call this once the client is ready.","params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":51,"file":"base.js","path":"src/providers/settings"}},{"name":"initListeners","description":"Initializes the listeners the settings provider should listen to for changes.","access":"private","returns":[[["void"]]],"meta":{"line":61,"file":"base.js","path":"src/providers/settings"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":98,"file":"base.js","path":"src/providers/settings"}},{"name":"get","description":"Obtains a setting for a guild.","params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"The value of the setting."},"meta":{"line":113,"file":"base.js","path":"src/providers/settings"}},{"name":"set","description":"Sets a setting for a guild.","params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The new value of the setting."},"meta":{"line":125,"file":"base.js","path":"src/providers/settings"}},{"name":"remove","description":"Removes a setting from a guild.","params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The old value of the setting."},"meta":{"line":145,"file":"base.js","path":"src/providers/settings"}},{"name":"clear","description":"Removes all settings in a guild.","params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":165,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuild","description":"Loads all settings for a guild.","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":180,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings.","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":212,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildGroup","description":"Sets up a group's status in a guild from the guild's settings.","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":234,"file":"base.js","path":"src/providers/settings"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":255,"file":"base.js","path":"src/providers/settings"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid.","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'."},"meta":{"line":278,"file":"base.js","path":"src/providers/settings"}}],"meta":{"line":15,"file":"base.js","path":"src/providers/settings"}},{"name":"GuildSettingsHelper","description":"Helper class to use {@link SettingsProvider} methods for a specific Guild.","construct":{"name":"GuildSettingsHelper","params":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]]},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["Guild"]]]}]},"props":[{"name":"client","description":"Client to use the provider of.","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":11,"file":"helper.js","path":"src/providers/settings"}},{"name":"guild","description":"Guild the settings are for.","nullable":true,"type":[[["Guild"]]],"meta":{"line":23,"file":"helper.js","path":"src/providers/settings"}}],"methods":[{"name":"get","description":"Gets a setting in the guild.","see":["{@link SettingsProvider#get}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set","optional":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"The value of the setting."},"meta":{"line":33,"file":"helper.js","path":"src/providers/settings"}},{"name":"set","description":"Sets a setting for the guild.","see":["{@link SettingsProvider#set}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting."},"meta":{"line":47,"file":"helper.js","path":"src/providers/settings"}},{"name":"remove","description":"Removes a setting from the guild.","see":["{@link SettingsProvider#remove}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting."},"meta":{"line":60,"file":"helper.js","path":"src/providers/settings"}},{"name":"clear","description":"Removes all settings in the guild.","see":["{@link SettingsProvider#clear}"],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":72,"file":"helper.js","path":"src/providers/settings"}}],"meta":{"line":4,"file":"helper.js","path":"src/providers/settings"}},{"name":"SQLiteSettingsProvider","description":"Uses an SQLite database to store settings with guilds.","extends":["SettingsProvider"],"construct":{"name":"SQLiteSettingsProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings.","type":[[["SQLiteDatabase"]]],"meta":{"line":34,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row.","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":41,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row.","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":48,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setSettingsProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":21,"file":"base.js","path":"src/providers/settings"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global').","access":"private","type":[[["Map"]]],"meta":{"line":35,"file":"base.js","path":"src/providers/settings"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name.","access":"private","type":[[["Map"]]],"meta":{"line":42,"file":"base.js","path":"src/providers/settings"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setSettingsProvider} will automatically call this once the client is ready.","inherits":"SettingsProvider#init","inherited":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":51,"file":"base.js","path":"src/providers/settings"}},{"name":"initListeners","description":"Initializes the listeners the settings provider should listen to for changes.","access":"private","inherits":"SettingsProvider#initListeners","inherited":true,"returns":[[["void"]]],"meta":{"line":61,"file":"base.js","path":"src/providers/settings"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingsProvider#destroy","inherited":true,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":98,"file":"base.js","path":"src/providers/settings"}},{"name":"get","description":"Obtains a setting for a guild.","inherits":"SettingsProvider#get","inherited":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"The value of the setting."},"meta":{"line":113,"file":"base.js","path":"src/providers/settings"}},{"name":"set","description":"Sets a setting for a guild.","inherits":"SettingsProvider#set","inherited":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The new value of the setting."},"meta":{"line":125,"file":"base.js","path":"src/providers/settings"}},{"name":"remove","description":"Removes a setting from a guild.","inherits":"SettingsProvider#remove","inherited":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The old value of the setting."},"meta":{"line":145,"file":"base.js","path":"src/providers/settings"}},{"name":"clear","description":"Removes all settings in a guild.","inherits":"SettingsProvider#clear","inherited":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":165,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuild","description":"Loads all settings for a guild.","access":"private","inherits":"SettingsProvider#setupGuild","inherited":true,"params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":180,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings.","access":"private","inherits":"SettingsProvider#setupGuildCommand","inherited":true,"params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":212,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildGroup","description":"Sets up a group's status in a guild from the guild's settings.","access":"private","inherits":"SettingsProvider#setupGuildGroup","inherited":true,"params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":234,"file":"base.js","path":"src/providers/settings"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","inherits":"SettingsProvider#updateOtherShards","inherited":true,"params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":255,"file":"base.js","path":"src/providers/settings"}}],"meta":{"line":14,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"YAMLSettingsProvider","description":"Uses local YAML files to store guild settings.","extends":["SettingsProvider"],"construct":{"name":"YAMLSettingsProvider","params":[{"name":"folder","description":"The path to the folder where the YAML setting files are stored","type":[[["string"]]]}]},"props":[{"name":"path","description":"The absolute path to the folder where the YAML setting files are stored.","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"yaml.js","path":"src/providers/settings"}},{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setSettingsProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":21,"file":"base.js","path":"src/providers/settings"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global').","access":"private","type":[[["Map"]]],"meta":{"line":35,"file":"base.js","path":"src/providers/settings"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name.","access":"private","type":[[["Map"]]],"meta":{"line":42,"file":"base.js","path":"src/providers/settings"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setSettingsProvider} will automatically call this once the client is ready.","inherits":"SettingsProvider#init","inherited":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":51,"file":"base.js","path":"src/providers/settings"}},{"name":"initListeners","description":"Initializes the listeners the settings provider should listen to for changes.","access":"private","inherits":"SettingsProvider#initListeners","inherited":true,"returns":[[["void"]]],"meta":{"line":61,"file":"base.js","path":"src/providers/settings"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingsProvider#destroy","inherited":true,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":98,"file":"base.js","path":"src/providers/settings"}},{"name":"get","description":"Obtains a setting for a guild.","inherits":"SettingsProvider#get","inherited":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"The value of the setting."},"meta":{"line":113,"file":"base.js","path":"src/providers/settings"}},{"name":"set","description":"Sets a setting for a guild.","inherits":"SettingsProvider#set","inherited":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The new value of the setting."},"meta":{"line":125,"file":"base.js","path":"src/providers/settings"}},{"name":"remove","description":"Removes a setting from a guild.","inherits":"SettingsProvider#remove","inherited":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"The old value of the setting."},"meta":{"line":145,"file":"base.js","path":"src/providers/settings"}},{"name":"clear","description":"Removes all settings in a guild.","inherits":"SettingsProvider#clear","inherited":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":165,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuild","description":"Loads all settings for a guild.","access":"private","inherits":"SettingsProvider#setupGuild","inherited":true,"params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":180,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings.","access":"private","inherits":"SettingsProvider#setupGuildCommand","inherited":true,"params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":212,"file":"base.js","path":"src/providers/settings"}},{"name":"setupGuildGroup","description":"Sets up a group's status in a guild from the guild's settings.","access":"private","inherits":"SettingsProvider#setupGuildGroup","inherited":true,"params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":234,"file":"base.js","path":"src/providers/settings"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","inherits":"SettingsProvider#updateOtherShards","inherited":true,"params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":[[["void"]]],"meta":{"line":255,"file":"base.js","path":"src/providers/settings"}}],"meta":{"line":21,"file":"yaml.js","path":"src/providers/settings"}},{"name":"StorageProvider","description":"Handles storage for data.","abstract":true,"props":[{"name":"client","description":"The associated client with this provider\n(set once the client is ready, after using {@link CommandoClient#setStorageProvider}).","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"base.js","path":"src/providers/storage"}}],"methods":[{"name":"init","description":"Initializes the provider by connecting to the storage backend.\n{@link Client#setStorageProvider} will automatically call this once the client is ready.","params":[{"name":"client","description":"The client","type":[[["CommandoClient"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":31,"file":"base.js","path":"src/providers/storage"}},{"name":"destroy","description":"Destroys the provider.","abstract":true,"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"The promise."},"meta":{"line":40,"file":"base.js","path":"src/providers/storage"}}],"meta":{"line":9,"file":"base.js","path":"src/providers/storage"}},{"name":"MongoStorageProvider","description":"Handles storage for data via Mongoose.","abstract":true,"construct":{"name":"MongoStorageProvider","params":[{"name":"mongoose","description":"The Mongoose instance","type":[[["Mongoose"]]]}]},"props":[{"name":"db","description":"The Mongoose instance that is used for storage.","readonly":true,"type":[[["Mongoose"]]],"meta":{"line":27,"file":"mongo.js","path":"src/providers/storage"}},{"name":"models","description":"The registered models.","access":"private","type":[[["Map"]]],"meta":{"line":40,"file":"mongo.js","path":"src/providers/storage"}}],"methods":[{"name":"model","description":"Gets a registered model.","params":[{"name":"modelName","description":"The model name","type":[[["string"]]]}],"returns":{"types":[["*"]],"description":"The model."},"meta":{"line":53,"file":"mongo.js","path":"src/providers/storage"}},{"name":"registerModel","description":"Registers a model.","params":[{"name":"modelName","description":"The model name","type":[[["string"]]]},{"name":"modelSchema","description":"The Mongoose schema","type":[[["MongooseSchema"]]]}],"returns":[[["void"]]],"meta":{"line":63,"file":"mongo.js","path":"src/providers/storage"}}],"meta":{"line":11,"file":"mongo.js","path":"src/providers/storage"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value against the type","abstract":true,"params":[{"name":"value","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandMessage"]]]},{"name":"arg","description":"Argument the value obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value into a usable value","abstract":true,"params":[{"name":"value","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandMessage"]]]},{"name":"arg","description":"Argument the value obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}}],"meta":{"line":2,"file":"base.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"selfbot","description":"Whether the command dispatcher should be in selfbot mode","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"unknownCommandResponse","description":"Whether the bot should respond to an unknown command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user, or multiple IDs","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["Set","<"],["string",">"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]}],"meta":{"line":22,"file":"client.js","path":"src"}},{"name":"Inhibitor","description":"A function that can block the usage of a command - these functions are passed the command message that is\ntriggering the command. They should return `false` if the command should *not* be blocked. If the command *should*\nbe blocked, they should return one of the following:\n- A single string identifying the reason the command is blocked\n- An array of the above string as element 0, and a response promise or `null` as element 1","type":[[["function"]]],"meta":{"line":53,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":396,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandMessage","type":[[["Command"]],[["string"]]],"meta":{"line":444,"file":"registry.js","path":"src"}},{"name":"ArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types -\nsee {@link CommandRegistry#registerDefaultTypes} for the built-in types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the argument optional - cannot be `null`)","optional":true,"type":[["*"]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":6,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentResult","description":"Result object from obtaining a single {@link Argument}'s value(s)","type":[[["Object"]]],"props":[{"name":"value","description":"Final value(s) for the argument","type":[["*"],[["Array","<"],["*",">"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":102,"file":"argument.js","path":"src/commands"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":8,"file":"base.js","path":"src/commands"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string - will be automatically generated if not specified,\nand `args` is specified","optional":true,"type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"userPermissions","description":"Permissions required by the user to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"argsPromptLimit","description":"Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array","<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":14,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollectorResult","description":"Result object from obtaining argument values from an {@link ArgumentCollector}","type":[[["Object"]]],"props":[{"name":"values","description":"Final values for the arguments, mapped by their keys","nullable":true,"type":[[["Object"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":49,"file":"collector.js","path":"src/commands"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":42,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":46,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":50,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":54,"file":"index.js","path":"src"}},{"name":"DMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/DMChannel}"],"meta":{"line":58,"file":"index.js","path":"src"}},{"name":"GroupDMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/GroupDMChannel}"],"meta":{"line":62,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":66,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":70,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":74,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":78,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":82,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":86,"file":"index.js","path":"src"}},{"name":"MessageReaction","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageReaction}"],"meta":{"line":90,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":94,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":98,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":102,"file":"index.js","path":"src"}},{"name":"TextChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/TextChannel}"],"meta":{"line":106,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":110,"file":"index.js","path":"src"}},{"name":"UserResolvable","see":["{@link https://discord.js.org/#/docs/main/master/class/UserResolvable}"],"meta":{"line":114,"file":"index.js","path":"src"}},{"name":"Emoji","see":["{@link https://discord.js.org/#/docs/main/master/class/Emoji}"],"meta":{"line":118,"file":"index.js","path":"src"}},{"name":"ReactionEmoji","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionEmoji}"],"meta":{"line":122,"file":"index.js","path":"src"}},{"name":"Webhook","see":["{@link https://discord.js.org/#/docs/main/master/class/Webhook}"],"meta":{"line":126,"file":"index.js","path":"src"}},{"name":"RichEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/RichEmbed}"],"meta":{"line":130,"file":"index.js","path":"src"}},{"name":"ShardingManager","see":["{@link https://discord.js.org/#/docs/main/master/class/ShardingManager}"],"meta":{"line":134,"file":"index.js","path":"src"}},{"name":"RequireAllOptions","see":["{@link https://www.npmjs.com/package/require-all}"],"meta":{"line":138,"file":"index.js","path":"src"}},{"name":"NodeCache","see":["{@link https://www.npmjs.com/package/node-cache}"],"meta":{"line":13,"file":"memory.js","path":"src/providers/cache"}},{"name":"Redis","see":["{@link https://www.npmjs.com/package/redis}"],"meta":{"line":13,"file":"redis.js","path":"src/providers/cache"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":15,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"SQLiteStatement","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":50,"file":"sqlite.js","path":"src/providers/settings"}},{"name":"Mongoose","see":["{@link https://www.npmjs.com/package/mongoose}"],"meta":{"line":12,"file":"mongo.js","path":"src/providers/storage"}}]}